{{- $_ := set $ "kreplicas" .Values.dependencies.kafka.brokerCount }}
{{- $_ := required "Namespace is required" $.Release.Namespace }}
{{- $_ := required "Replicator name is required" $.Values.name }}
{{- $_ := required "Kafka Cluster bootstrap endpoint is required" $.Values.dependencies.kafka.bootstrapEndpoint }}
{{- $_ := required "Replicator replica count is required" $.Values.replicas }}
{{- $_ := required "Docker Repository FQDN path is required" $.Values.global.provider.registry.fqdn }}
{{- if and (not .Values.tls.enabled) .Values.tls.internalTLS }}
{{- fail "tls must be enabled for internalTLS to be enabled" }}
{{- end }}
{{- $k8sInternalDomain := default "svc.cluster.local" $.Values.global.provider.kubernetes.clusterDomain }}
{{- $replicas := $.Values.replicas | int }}
{{- $_ := set $ "telemetrySupported" false }}

apiVersion: operator.confluent.cloud/v1
kind: PhysicalStatefulCluster
metadata:
  {{- include "confluent-operator.labels" . }}
  {{- include "confluent-operator.finalizers" . }}
  {{- include "confluent-operator.component-name" . }}
  {{- include "confluent-operator.namespace" . }}
spec:
  cloud:
    {{- include "confluent-operator.docker-repo" . }}
    {{- include "confluent-operator.hostPort" . }}
  cluster_id: {{ include "confluent-operator.cluster-id" . }}
  common:
{{- include "confluent-operator.affinity" (dict "Values" .Values "isPSC" "true") | indent 4 }}
    config:
      pod:
      - config:
        - name: template.jsonnet
          {{- $_ := set $ "domainName" $k8sInternalDomain }}
          value: {{ include "confluent-operator.template-psc" . | b64enc  }}
        id: {{ $.Values.name }}
      shared:
      - name: replicator.properties
        value: |2

{{ include "confluent-operator.config-file-provider" . | indent 10 }}
{{ include "replicator.kafka-config" . | indent 10 }}
{{ include "replicator.producer-config" . | indent 10 }}
{{ include "replicator.consumer-config" . | indent 10 }}
{{ include "confluent-operator.cp-mds-config" . | indent 10 }}
          {{- if .Values.global.authorization.rbac.enabled }}
          connector.client.config.override.policy=All
          confluent.metadata.http.auth.credentials.provider=BASIC
          rest.servlet.initializor.classes=io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
          rest.extension.classes=io.confluent.connect.security.ConnectSecurityExtension
          {{- end }}
          confluent.topic.replication.factor={{ include  "confluent-operator.replication_count" $ }}
          group.id={{ $.Release.Namespace }}.{{ $.Values.name }}
          key.converter={{ $.Values.key.converter }}
          value.converter={{ $.Values.value.converter }}
          {{- if $.Values.schemas.enabled }}
          key.converter.schemas.enable=true
          value.converter.schemas.enable=true
          {{- else }}
          key.converter.schemas.enable=false
          value.converter.schemas.enable=false
          {{- end }}
          offset.storage.topic={{ $.Release.Namespace }}.{{ $.Values.name }}-offsets
          offset.storage.replication.factor={{ include  "confluent-operator.replication_count" $ }}
          config.storage.topic={{ $.Release.Namespace }}.{{ $.Values.name }}-configs
          config.storage.replication.factor={{ include  "confluent-operator.replication_count" $ }}
          status.storage.topic={{ $.Release.Namespace }}.{{ $.Values.name }}-status
          status.storage.replication.factor={{ include  "confluent-operator.replication_count" $ }}
          offset.flush.interval.ms=10000
          plugin.path=/usr/share/java
          {{- if .Values.tls.enabled }}
          listeners=http://0.0.0.0:9083,https://0.0.0.0:8083
          {{- if eq .Values.tls.authentication.type "tls" }}
          listeners.https.ssl.client.auth=required
          {{- end }}
          {{- if .Values.tls.cacerts }}
          listeners.https.ssl.truststore.location=/tmp/truststore.jks
          listeners.https.ssl.truststore.password=${file:/mnt/secrets/jksPassword.txt:jksPassword}
          {{- end }}
          listeners.https.ssl.keystore.location=/tmp/keystore.jks
          listeners.https.ssl.keystore.password=${file:/mnt/secrets/jksPassword.txt:jksPassword}
          listeners.https.ssl.key.password=${file:/mnt/secrets/jksPassword.txt:jksPassword}
          {{- else }}
          listeners=http://0.0.0.0:9083,http://0.0.0.0:8083
          {{- end }}
          request.timeout.ms=20000
          retry.backoff.ms=500

      - name: log4j.properties
        value: |2

          log4j.rootLogger=INFO, stdout
          log4j.appender.stdout=org.apache.log4j.ConsoleAppender
          log4j.appender.stdout.layout=org.apache.log4j.EnhancedPatternLayout
          log4j.appender.stdout.layout.ConversionPattern=[%p] %d [%t] %c %M - %m%n
          log4j.logger.org.apache.zookeeper=ERROR, stdout
          log4j.logger.org.I0Itec.zkclient=ERROR, stdout
          log4j.logger.org.reflections=ERROR, stdout

      - name: disk-usage-agent.properties
        value: |2

          disk.data=/mnt/log
          service.name={{ $.Values.name }}
      {{- $_ := set $ "tlsEnable" .Values.tls.jmxTLS }}
      {{- $_ := set $ "authType" .Values.tls.jmxAuthentication.type }}
{{ include "confluent-operator.jolokia-security-configs" . | indent 6 }}

      - name: jvm.config
        value: |2

          -Xmx {{- $.Values.jvmConfig.heapSize }}
          -Xms {{- $.Values.jvmConfig.heapSize }}
          -server
          -XX:MetaspaceSize=96m
          -XX:+UseG1GC
          -XX:MaxGCPauseMillis=20
          -XX:InitiatingHeapOccupancyPercent=35
          -XX:+ExplicitGCInvokesConcurrent
          -XX:G1HeapRegionSize=16
          -XX:MinMetaspaceFreeRatio=50
          -XX:MaxMetaspaceFreeRatio=80
          -Djava.awt.headless=true
          -Djdk.tls.ephemeralDHKeySize=2048
          -XX:ParallelGCThreads=1
          -XX:ConcGCThreads=1
          -Dcom.sun.management.jmxremote=true
          -Dcom.sun.management.jmxremote.authenticate=false
          -Dcom.sun.management.jmxremote.local.only=false
          -Dcom.sun.management.jmxremote.rmi.port=7203
          -Dcom.sun.management.jmxremote.port=7203
          -XX:+PrintFlagsFinal
          -XX:+UnlockDiagnosticVMOptions
          {{- $_ := set $ "tlsEnable" false }}
          {{- $_ := set $ "authType" "" }}
          {{- $_ := set $ "jmxTLSEnable" .Values.tls.jmxTLS }}
          {{- $_ := set $ "jmxAuthType" .Values.tls.jmxAuthentication.type }}
{{ include "confluent-operator.jvm-security-configs" . | indent 10 }}
{{ include "confluent-operator.jmx-security-configs" . | indent 10 }}
      - name: admin.properties
        value: |2
{{ include "confluent-operator.config-file-provider" . | indent 10 }}
{{- $_ := set $ "kafkaDependency" .Values.dependencies.kafka }}
{{ include "confluent-operator.kafka-client-security" . | indent 10 }}
    pod_annotations:
    {{- include "confluent-operator.annotations" . | indent 6 }}
    {{- include "confluent-operator.psc-init-container" . | indent 4 }}
    container:  
      image: {{ $.Values.image.repository -}}:{{- $.Values.image.tag }}
      {{- include "confluent-operator.psc-mounted-secrets" . | indent 6 }}
      {{- if .Values.serviceAccountName }}
      service_account: {{ .Values.serviceAccountName }}
      {{- end }}
      termination_grace_period_seconds: {{ $.Values.terminationGracePeriodSeconds | default 60 }}
      {{- if $.Values.nodeAffinity }}
      node_affinity:
        key: {{ $.Values.nodeAffinity.key }}
        values:
{{ toYaml $.Values.nodeAffinity.values | trim | indent 8 }}
      {{- end }}
      {{- if $.Values.rack }}
      rack:
        topology: {{ $.Values.rack.topology }}
      {{- end }}
      readiness_probe:
        http:
          path: /v1/metadata/id
          port: 9083
        initial_delay_seconds: 30
        timeout_seconds: 10
{{- if .Values.global.pod }}      
{{ include "confluent-operator.psc-pod-security-config" . | trim | indent 4 }}
{{- end }}
    network:
      ports:
      - name: external
        port: 8083
        protocol: TCP
      - name: internal
        port: 9083
        protocol: TCP
      - name: jmx
        port: 7203
        protocol: TCP
      - name: jolokia
        port: 7777
        protocol: TCP
      {{- if and $.Values.loadBalancer.enabled (ne $.Values.loadBalancer.type "route") }}
      {{- $_ := required "Configure domain name to access connect outside kubernetes cluster." $.Values.loadBalancer.domain }}
      proxy:
        {{- if eq $.Values.loadBalancer.type "internal" }}
        internal: true
        {{- end }}
        {{- if $.Values.loadBalancer.annotations }}
        annotations:
{{ toYaml .Values.loadBalancer.annotations | trim | indent 10 }}
        {{- end }}
        bootstrap:
          {{- include "confluent-operator.dns-name" . | indent 10 }}
          {{- if $.Values.tls.enabled }}
          port: {{ $.Values.tls.port }}
          {{- else }}
          port: 80
          {{- end }}
      {{- end }}
    {{- $_ := set $ "name" $.Values.name }}
    {{- $_ := set $ "replicas" $.Values.replicas }}
    replicas: {{ $replicas }}
    resources:
{{- include "confluent-operator.resource-requirements" . | indent 6 }}
    {{- include "confluent-operator.psc-version" . | indent 4 }}
  {{- if empty $.Values.name }}
  {{- $_ := required "Replicator name is required" $.Values.name }}
  {{- end }}
  type: {{ $.Values.name }}
